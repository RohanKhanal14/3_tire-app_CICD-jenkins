# =============================================================================
# Docker Compose - Production Environment
# =============================================================================
# This configuration is optimized for production with:
# - Optimized build targets for minimal image sizes
# - Health checks for all services
# - Proper service dependencies
# - Production-ready environment variables
#
# Usage: docker-compose up -d

services:
  # =============================================================================
  # MongoDB Database (Production)
  # =============================================================================
  mongodb:
    image: mongo:7-jammy
    container_name: mongodb
    restart: unless-stopped
    ports:
      # Expose MongoDB port (consider restricting in production)
      - "27017:27017"
    environment:
      # Database authentication (use secrets in production!)
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: toor
      MONGO_INITDB_DATABASE: mydatabase
    volumes:
      # Persist database data using named volumes
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - app-network
    healthcheck:
      # Monitor MongoDB health
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # Backend API Service (Production)
  # =============================================================================
  backend:
    image: rohankhanal14/task-backend:latest
    container_name: backend
    restart: unless-stopped
    ports:
      # Expose backend API port
      - "5050:5050"
    environment:
      # Production environment variables
      PORT: 5050
      # Connect to MongoDB using container service name
      MONGO_URI: mongodb://root:toor@mongodb:27017/mydatabase?authSource=admin
      NODE_ENV: production
    depends_on:
      # Ensure MongoDB is healthy before starting backend
      mongodb:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      # Monitor backend API health
      test:
        [
          "CMD",
          "node",
          "-e",
          "const http = require('http'); const options = { hostname: '127.0.0.1', port: 5050, path: '/', timeout: 2000 }; const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.end();",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # =============================================================================
  # Frontend Web Service (Production)
  # =============================================================================
  frontend:
    image: rohankhanal14/task-frontend:latest
    container_name: frontend
    restart: unless-stopped
    ports:
      # Expose HTTP port for web traffic
      - "80:80"
    depends_on:
      # Ensure backend is healthy before starting frontend
      backend:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      # Monitor Nginx web server health
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://127.0.0.1:80",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# =============================================================================
# Named Volumes (Production)
# =============================================================================
# Persistent storage for database data
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local

# =============================================================================
# Networks (Production)
# =============================================================================
# Custom bridge network for service communication
networks:
  app-network:
    driver: bridge
